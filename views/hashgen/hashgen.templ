// views/hashgen/hashgen.templ
package hashgen

import "strings"
import "sort"

type HashResult struct {
	InputText  string
	HashValues map[string]string
	Error      string
	IsFile     bool
	FileName   string
	FileSize   string
}

type HashVerifyResult struct {
	Input          string
	Hash           string
	Algorithm      string
	Matches        bool
	CalculatedHash string
	Error          string
}

templ Index() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Hash Generator</title>
			<script src="https://unpkg.com/htmx.org@1.9.6"></script>
			<style>
			body {
				font-family: Arial, sans-serif;
				max-width: 800px;
				margin: 0 auto;
				padding: 20px;
				color: #333;
			}
			.card {
				background-color: white;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
				padding: 30px;
				margin-bottom: 30px;
			}
			h1 {
				color: #0e4174;
				text-align: center;
				margin-bottom: 10px;
			}
			.description {
				text-align: center;
				color: #666;
				margin-bottom: 20px;
			}
			.form-container {
				margin-bottom: 20px;
			}
			textarea {
				width: 100%;
				padding: 10px;
				border: 1px solid #ddd;
				border-radius: 4px;
				min-height: 80px;
				font-family: monospace;
				resize: vertical;
				margin-bottom: 10px;
			}
			.buttons {
				display: flex;
				gap: 10px;
				margin-bottom: 20px;
			}
			button {
				padding: 10px 15px;
				background-color: #0e4174;
				color: white;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				flex-grow: 1;
			}
			button:hover {
				background-color: #0a325e;
			}
			.loading {
				text-align: center;
				padding: 20px;
				display: none;
			}
			.htmx-request .loading {
				display: block;
			}
			.results {
				margin-top: 20px;
			}
			.result-section {
				background-color: #f5f5f5;
				border-radius: 4px;
				padding: 15px;
				margin-bottom: 15px;
			}
			.result-title {
				font-weight: bold;
				margin-bottom: 10px;
				color: #0e4174;
			}
			.result-content {
				background-color: white;
				border: 1px solid #ddd;
				border-radius: 4px;
				padding: 10px;
				font-family: monospace;
				white-space: pre-wrap;
				word-break: break-all;
				max-height: 200px;
				overflow-y: auto;
			}
			.error {
				background-color: #ffebee;
				border-left: 5px solid #f44336;
				padding: 15px;
				border-radius: 5px;
			}
			.copy-button {
				margin-top: 10px;
				background-color: #eee;
				color: #333;
				padding: 5px 10px;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				font-size: 12px;
			}
			.copy-button:hover {
				background-color: #ddd;
			}
			.tab-container {
				margin-bottom: 20px;
			}
			.tabs {
				display: flex;
				border-bottom: 1px solid #ddd;
			}
			.tab {
				padding: 10px 15px;
				cursor: pointer;
				border: 1px solid transparent;
				border-bottom: none;
				border-radius: 4px 4px 0 0;
				margin-right: 5px;
			}
			.tab.active {
				background-color: #f5f5f5;
				border-color: #ddd;
				border-bottom-color: #f5f5f5;
			}
			.tab-content {
				display: none;
				padding: 20px;
				border: 1px solid #ddd;
				border-top: none;
				background-color: #f5f5f5;
			}
			.tab-content.active {
				display: block;
			}
			.option-group {
				margin-bottom: 15px;
			}
			.option-label {
				font-weight: bold;
				margin-bottom: 5px;
			}
			.checkbox-group {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
				gap: 8px;
				margin-top: 10px;
			}
			.checkbox-item {
				display: flex;
				align-items: center;
			}
			.checkbox-item input {
				margin-right: 5px;
			}
			input[type="text"] {
				width: 100%;
				padding: 10px;
				border: 1px solid #ddd;
				border-radius: 4px;
				font-family: monospace;
				margin-bottom: 10px;
				box-sizing: border-box;
			}
			.file-input-wrapper {
				position: relative;
				overflow: hidden;
				display: inline-block;
				margin-bottom: 15px;
				width: 100%;
			}
			.file-input-button {
				background-color: #f0f0f0;
				border: 1px solid #ddd;
				border-radius: 4px;
				padding: 10px 15px;
				cursor: pointer;
				display: inline-block;
				width: 100%;
				text-align: center;
				box-sizing: border-box;
			}
			.file-input {
				font-size: 100px;
				position: absolute;
				left: 0;
				top: 0;
				opacity: 0;
				cursor: pointer;
				width: 100%;
				height: 100%;
			}
			.file-name {
				margin-top: 5px;
				font-size: 14px;
				color: #666;
				text-align: center;
			}
			.hash-table {
				width: 100%;
				border-collapse: collapse;
				margin-top: 10px;
			}
			.hash-table th, .hash-table td {
				padding: 8px;
				text-align: left;
				border-bottom: 1px solid #eee;
			}
			.hash-table th {
				font-weight: bold;
				color: #0e4174;
				width: 30%;
			}
			.hash-table td {
				font-family: monospace;
				word-break: break-all;
			}
			.copy-cell {
				width: 60px;
				text-align: center !important;
			}
			.table-copy-btn {
				background-color: #eee;
				color: #333;
				border: none;
				border-radius: 4px;
				padding: 3px 8px;
				font-size: 12px;
				cursor: pointer;
			}
			.table-copy-btn:hover {
				background-color: #ddd;
			}
			.verify-result {
				text-align: center;
				font-weight: bold;
				font-size: 18px;
				padding: 15px;
				border-radius: 4px;
				margin-top: 15px;
			}
			.match-true {
				background-color: #e8f5e9;
				color: #2e7d32;
				border: 1px solid #a5d6a7;
			}
			.match-false {
				background-color: #fbe9e7;
				color: #c62828;
				border: 1px solid #ef9a9a;
			}
			.info-box {
				background-color: #e8f4fd;
				border-left: 5px solid #0e4174;
				padding: 15px;
				margin-bottom: 20px;
				font-size: 14px;
				line-height: 1.5;
			}
			.radio-group {
				display: flex;
				gap: 15px;
				margin-top: 5px;
				margin-bottom: 15px;
			}
			.radio-item {
				display: flex;
				align-items: center;
			}
			.radio-item input {
				margin-right: 5px;
			}
		</style>
		</head>
		<body>
			<div class="card">
				<h1>Hash Generator</h1>
				<p class="description">Generate and verify cryptographic hash values for text and files.</p>
				<div class="info-box">
					A hash function converts data of any size into a fixed-length string. Hash functions are used for data integrity checks,
					password storage, digital signatures, and more. Each algorithm has different security properties and use cases.
				</div>
				<div class="tab-container">
					<div class="tabs">
						<div class="tab active" onclick="switchTab('text-tab', this)">Text Hash</div>
						<div class="tab" onclick="switchTab('file-tab', this)">File Hash</div>
						<div class="tab" onclick="switchTab('verify-tab', this)">Verify Hash</div>
					</div>
					<div id="text-tab" class="tab-content active">
						<div class="form-container">
							<form
								id="text-hash-form"
								hx-post="/hash/generate"
								hx-target="#results"
								hx-indicator=".loading"
							>
								<div class="option-group">
									<div class="option-label">Text to hash:</div>
									<textarea name="text" placeholder="Enter text to generate hash values..." required></textarea>
								</div>
								<div class="option-group">
									<div class="option-label">Hash Algorithms:</div>
									<div class="checkbox-group">
										<div class="checkbox-item">
											<input type="checkbox" id="md5" name="algorithms" value="md5" checked/>
											<label for="md5">MD5</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="sha1" name="algorithms" value="sha1" checked/>
											<label for="sha1">SHA-1</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="sha256" name="algorithms" value="sha256" checked/>
											<label for="sha256">SHA-256</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="sha512" name="algorithms" value="sha512" checked/>
											<label for="sha512">SHA-512</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="sha3-256" name="algorithms" value="sha3-256"/>
											<label for="sha3-256">SHA3-256</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="sha3-512" name="algorithms" value="sha3-512"/>
											<label for="sha3-512">SHA3-512</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="blake2b" name="algorithms" value="blake2b"/>
											<label for="blake2b">BLAKE2b</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="ripemd160" name="algorithms" value="ripemd160"/>
											<label for="ripemd160">RIPEMD-160</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="crc32" name="algorithms" value="crc32"/>
											<label for="crc32">CRC32</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="bcrypt" name="algorithms" value="bcrypt"/>
											<label for="bcrypt">bcrypt</label>
										</div>
									</div>
								</div>
								<button type="submit">Generate Hashes</button>
							</form>
						</div>
					</div>
					<div id="file-tab" class="tab-content">
						<div class="form-container">
							<form
								id="file-hash-form"
								hx-post="/hash/file"
								hx-target="#results"
								hx-indicator=".loading"
								enctype="multipart/form-data"
							>
								<div class="option-group">
									<div class="option-label">File to hash:</div>
									<div class="file-input-wrapper">
										<div class="file-input-button">Choose File</div>
										<input type="file" name="file" class="file-input" required onchange="updateFileName(this)"/>
									</div>
									<div class="file-name" id="file-name">No file selected</div>
								</div>
								<div class="option-group">
									<div class="option-label">Hash Algorithms:</div>
									<div class="checkbox-group">
										<div class="checkbox-item">
											<input type="checkbox" id="file-md5" name="algorithms" value="md5" checked/>
											<label for="file-md5">MD5</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-sha1" name="algorithms" value="sha1" checked/>
											<label for="file-sha1">SHA-1</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-sha256" name="algorithms" value="sha256" checked/>
											<label for="file-sha256">SHA-256</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-sha512" name="algorithms" value="sha512" checked/>
											<label for="file-sha512">SHA-512</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-sha3-256" name="algorithms" value="sha3-256"/>
											<label for="file-sha3-256">SHA3-256</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-sha3-512" name="algorithms" value="sha3-512"/>
											<label for="file-sha3-512">SHA3-512</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-blake2b" name="algorithms" value="blake2b"/>
											<label for="file-blake2b">BLAKE2b</label>
										</div>
										<div class="checkbox-item">
											<input type="checkbox" id="file-crc32" name="algorithms" value="crc32"/>
											<label for="file-crc32">CRC32</label>
										</div>
									</div>
								</div>
								<button type="submit">Calculate File Hashes</button>
							</form>
						</div>
					</div>
					<div id="verify-tab" class="tab-content">
						<div class="form-container">
							<form
								id="verify-hash-form"
								hx-post="/hash/verify"
								hx-target="#results"
								hx-indicator=".loading"
							>
								<div class="option-group">
									<div class="option-label">Input:</div>
									<textarea name="input" placeholder="Enter the original text..." required></textarea>
								</div>
								<div class="option-group">
									<div class="option-label">Hash to verify:</div>
									<input type="text" name="hash" placeholder="Enter the hash value to verify..." required/>
								</div>
								<div class="option-group">
									<div class="option-label">Hash Algorithm:</div>
									<div class="radio-group">
										<div class="radio-item">
											<input type="radio" id="verify-md5" name="algorithm" value="md5" checked/>
											<label for="verify-md5">MD5</label>
										</div>
										<div class="radio-item">
											<input type="radio" id="verify-sha1" name="algorithm" value="sha1"/>
											<label for="verify-sha1">SHA-1</label>
										</div>
										<div class="radio-item">
											<input type="radio" id="verify-sha256" name="algorithm" value="sha256"/>
											<label for="verify-sha256">SHA-256</label>
										</div>
										<div class="radio-item">
											<input type="radio" id="verify-sha512" name="algorithm" value="sha512"/>
											<label for="verify-sha512">SHA-512</label>
										</div>
										<div class="radio-item">
											<input type="radio" id="verify-bcrypt" name="algorithm" value="bcrypt"/>
											<label for="verify-bcrypt">bcrypt</label>
										</div>
									</div>
								</div>
								<button type="submit">Verify Hash</button>
							</form>
						</div>
					</div>
				</div>
				<div class="loading">
					<svg width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" stroke="#0e4174">
						<g fill="none" fill-rule="evenodd">
							<g transform="translate(1 1)" stroke-width="2">
								<circle stroke-opacity=".5" cx="18" cy="18" r="18"></circle>
								<path d="M36 18c0-9.94-8.06-18-18-18">
									<animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="1s" repeatCount="indefinite"></animateTransform>
								</path>
							</g>
						</g>
					</svg>
				</div>
				<div id="results">
					<!-- Results will be loaded here -->
				</div>
			</div>
			<script>
			function switchTab(tabId, tabElement) {
				// Hide all tab contents
				document.querySelectorAll('.tab-content').forEach(tab => {
					tab.classList.remove('active');
				});

				// Remove active class from all tabs
				document.querySelectorAll('.tab').forEach(tab => {
					tab.classList.remove('active');
				});

				// Show the selected tab content
				document.getElementById(tabId).classList.add('active');

				// Add active class to the clicked tab
				tabElement.classList.add('active');
			}

			function updateFileName(input) {
				const fileName = input.files[0] ? input.files[0].name : "No file selected";
				document.getElementById("file-name").textContent = fileName;
			}

			function copyHashValue(hash) {
				navigator.clipboard.writeText(hash);
				alert("Hash copied to clipboard!");
			}
		</script>
		</body>
	</html>
}

templ Results(result HashResult) {
	<div class="results">
		if result.Error != "" {
			<div class="error">
				<p>Error: { result.Error }</p>
			</div>
		} else {
			<div class="result-section">
				<div class="result-title">Input:</div>
				<div class="result-content">{ result.InputText }</div>
			</div>
			if result.IsFile {
				<div class="result-title">File Information:</div>
				<div style="margin-bottom: 15px;">
					<strong>File Name:</strong> { result.FileName }
					<br/>
					<strong>File Size:</strong> { result.FileSize }
				</div>
			}
			<div class="result-title">Hash Values:</div>
			<table class="hash-table">
				<thead>
					<tr>
						<th>Algorithm</th>
						<th>Hash Value</th>
						<th class="copy-cell">Action</th>
					</tr>
				</thead>
				<tbody>
					for _, key := range getSortedKeys(result.HashValues) {
						<tr>
							<th>{ key }</th>
							<td id={ "hash-" + strings.ToLower(strings.ReplaceAll(key, "-", "")) }>{ result.HashValues[key] }</td>
							<td class="copy-cell">
								<button class="table-copy-btn" onclick="copyHashValue('{result.HashValues[key]}')">Copy</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>
}

func getSortedKeys(m map[string]string) []string {
	// Sort hash algorithms in a specific order
	algorithmOrder := map[string]int{
		"MD5":         1,
		"SHA-1":       2,
		"SHA-224":     3,
		"SHA-256":     4,
		"SHA-384":     5,
		"SHA-512":     6,
		"SHA3-224":    7,
		"SHA3-256":    8,
		"SHA3-384":    9,
		"SHA3-512":    10,
		"BLAKE2b-512": 11,
		"RIPEMD-160":  12,
		"CRC32":       13,
		"bcrypt":      14,
		"MD4":         15,
	}

	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}

	sort.Slice(keys, func(i, j int) bool {
		orderI, existsI := algorithmOrder[keys[i]]
		orderJ, existsJ := algorithmOrder[keys[j]]

		if existsI && existsJ {
			return orderI < orderJ
		} else if existsI {
			return true
		} else if existsJ {
			return false
		}
		return keys[i] < keys[j]
	})

	return keys
}

templ VerifyResult(result HashVerifyResult) {
	<div class="results">
		if result.Error != "" {
			<div class="error">
				<p>Error: { result.Error }</p>
			</div>
		} else {
			<div class="result-section">
				<div class="result-title">Verification Details:</div>
				<div style="margin-bottom: 15px;">
					<strong>Input:</strong> { result.Input }
					<br/>
					<strong>Hash Value:</strong> { result.Hash }
					<br/>
					<strong>Algorithm:</strong> { result.Algorithm }
					<br/>
					if result.Algorithm != "bcrypt" && result.CalculatedHash != "" {
						<strong>Calculated Hash:</strong> { result.CalculatedHash }
						<br/>
					}
				</div>
				<div class={ getMatchClass(result.Matches) }>
					if result.Matches {
						Hash verification successful! The hash matches the input.
					} else {
						Hash verification failed! The hash does not match the input.
					}
				</div>
			</div>
		}
	</div>
}

func getMatchClass(matches bool) string {
	if matches {
		return "verify-result match-true"
	}
	return "verify-result match-false"
}
