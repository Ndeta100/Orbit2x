package qr_code

import (
	"strings"
		"github.com/Ndeta100/orbit2x/views/layout"

		"github.com/Ndeta100/orbit2x/views/components"

)


// QRPageData holds data for the main QR page
type QRPageData struct {
	Title string
}

// QRResultData holds data for QR generation results
type QRResultData struct {
	Success   bool
	Message   string
	ImageData string
	QRType    string
	Content   string
}

// Main QR Generator Page using base layout
templ QRGeneratorPage(data QRPageData) {
	@layout.Base(data.Title) {
		@QRHero()
		@QRInputForm()
		@QRResultSection()
		@QRContentSection()
		@components.SwitchTabsScript()
		@QRScript()
	}
}

// Hero Section
templ QRHero() {
	<section class="py-16">
		<div class="container mx-auto px-4 text-center">
			<h1 class="text-5xl font-bold text-gray-800 mb-4">
				Free QR Code Generator
			</h1>
			<p class="text-xl text-gray-600 mb-2 max-w-2xl mx-auto">
				Create professional QR codes instantly {"for"} text, URLs, emails, phone numbers and SMS messages
			</p>
			<p class="text-sm text-gray-500">
				Powered by <span class="font-semibold">orbit2x.com</span>
			</p>
		</div>
	</section>
}

// Input Form Section
templ QRInputForm() {
	<section class="py-12">
		<div class="container mx-auto px-4 max-w-4xl">
			<div class="glass bg-white/30 rounded-3xl shadow-2xl border border-gray-200/50 p-8">
				<h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">1. Choose Type & Enter Data</h2>

				<!-- QR Type Tabs using reusable component -->
				<div class="flex justify-center mb-8">
					@components.SwitchTabs("qr-tabs", []components.TabItem{
						{ID: "text", Label: "Text", Icon: "M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253", Active: true},
						{ID: "url", Label: "Website", Icon: "M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9", Active: false},
						{ID: "email", Label: "Email", Icon: "M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z", Active: false},
						{ID: "phone", Label: "Phone", Icon: "M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z", Active: false},
						{ID: "sms", Label: "SMS", Icon: "M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z", Active: false},
					})
				</div>

				<!-- QR Generation Form -->
				<form id="qr-form"
					  hx-post="/qr/generate"
					  hx-target="#qr-result-container"
					  hx-indicator="#qr-loading"
					  hx-on::before-request="hideError()">

					<input type="hidden" id="qr-type" name="type" value="text"/>

					<!-- Text Panel -->
					<div id="text" class="tab-content active">
						<div class="glass-light bg-white/40 rounded-2xl p-6 border border-gray-200/30 max-w-2xl mx-auto">
							<label class="block text-sm font-semibold text-gray-700 mb-3">Enter your text:</label>
							<textarea id="text-input" name="data" rows="4"
									class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
									placeholder="Enter any text you want to encode in the QR code..."
									hx-trigger="input changed delay:1s"
									hx-post="/qr/preview"
									hx-target="#qr-preview"
									hx-include="#qr-type"></textarea>
						</div>
					</div>

					<!-- URL Panel -->
					<div id="url" class="tab-content">
						<div class="glass-light bg-white/40 rounded-2xl p-6 border border-gray-200/30 max-w-2xl mx-auto">
							<label class="block text-sm font-semibold text-gray-700 mb-3">Website URL:</label>
							<input type="url" id="url-input" name="data"
								   class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
								   placeholder="https://example.com"
								   hx-trigger="input changed delay:1s"
								   hx-post="/qr/preview"
								   hx-target="#qr-preview"
								   hx-include="#qr-type"/>
						</div>
					</div>

					<!-- Email Panel -->
					<div id="email" class="tab-content">
						<div class="glass-light bg-white/40 rounded-2xl p-6 border border-gray-200/30 max-w-2xl mx-auto">
							<label class="block text-sm font-semibold text-gray-700 mb-3">Email Address:</label>
							<input type="email" id="email-input" name="data"
								   class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
								   placeholder="contact@example.com"
								   hx-trigger="input changed delay:1s"
								   hx-post="/qr/preview"
								   hx-target="#qr-preview"
								   hx-include="#qr-type"/>
							<p class="text-sm text-gray-600 mt-3 flex items-center">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
								</svg>
								When scanned, this will open the email app with this address ready to send to.
							</p>
						</div>
					</div>

					<!-- Phone Panel -->
					<div id="phone" class="tab-content">
						<div class="glass-light bg-white/40 rounded-2xl p-6 border border-gray-200/30 max-w-2xl mx-auto">
							<label class="block text-sm font-semibold text-gray-700 mb-3">Phone Number:</label>
							<input type="tel" id="phone-input" name="data"
								   class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
								   placeholder="+1 (555) 123-4567"
								   hx-trigger="input changed delay:1s"
								   hx-post="/qr/preview"
								   hx-target="#qr-preview"
								   hx-include="#qr-type"/>
							<p class="text-sm text-gray-600 mt-3 flex items-center">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
								</svg>
								When scanned, this will open the phone app ready to call this number.
							</p>
						</div>
					</div>

					<!-- SMS Panel -->
					<div id="sms" class="tab-content">
						<div class="glass-light bg-white/40 rounded-2xl p-6 border border-gray-200/30 space-y-4 max-w-2xl mx-auto">
							<div>
								<label class="block text-sm font-semibold text-gray-700 mb-3">Phone Number:</label>
								<input type="tel" id="sms-phone"
									   class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
									   placeholder="+1 (555) 123-4567"/>
							</div>

							<div>
								<label class="block text-sm font-semibold text-gray-700 mb-3">Message (optional):</label>
								<textarea id="sms-message" rows="3"
										class="w-full px-4 py-3 glass-light bg-white/50 border border-gray-200/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 focus:ring-glass"
										placeholder="Your message here..."></textarea>
							</div>
							<p class="text-sm text-gray-600 flex items-center">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
								</svg>
								When scanned, this will open the SMS app with the number and message ready to send.
							</p>
						</div>
					</div>

					<!-- Generate Button - FIXED -->
					<div class="mt-8 flex justify-center">
						<button type="submit" class="group inline-flex items-center justify-center px-8 py-4 text-base font-bold rounded-2xl text-white bg-black hover:bg-gray-800 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 backdrop-blur-sm border border-gray-200/20 relative overflow-hidden">
							<!-- Shimmer effect -->
							<div class="absolute inset-0 bg-gradient-to-r from-transparent via-white via-transparent opacity-0 group-hover:opacity-10 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-1000"></div>

							<!-- Loading state -->
							<span id="qr-loading" class="htmx-indicator absolute inset-0 flex items-center justify-center relative z-10" style="display: none;">
								<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
									<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
									<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
								</svg>
								Generating...
							</span>

							<!-- Normal state -->
							<span class="htmx-indicator:not(.htmx-request) relative z-10">Generate QR Code</span>
							<svg class="htmx-indicator:not(.htmx-request) relative z-10 ml-3 h-5 w-5 transform group-hover:translate-x-1 transition-transform duration-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
							</svg>
						</button>
					</div>
				</form>

				<!-- Error Message -->
				<div id="error-message" class="mt-6 p-4 glass bg-red-50/80 border border-red-200/50 rounded-xl text-red-700 hidden max-w-2xl mx-auto">
					<div class="flex items-center">
						<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
						</svg>
						<span id="error-text"></span>
					</div>
				</div>
			</div>
		</div>
	</section>
}

// QR Result Section (moved below)
templ QRResultSection() {
	<section class="py-12">
		<div class="container mx-auto px-4 max-w-4xl">
			<div class="glass bg-white/30 rounded-3xl shadow-2xl border border-gray-200/50 p-8">
				<h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">2. Your QR Code</h2>

				<!-- Preview Area -->
				<div id="qr-preview" class="mb-6">
					@QRInitialState()
				</div>

				<!-- Main Result Area -->
				<div id="qr-result-container">
					<!-- Results will be inserted here via HTMX -->
				</div>
			</div>
		</div>
	</section>
}

// QR JavaScript functionality
templ QRScript() {
	<script>
		// Override tab switching to handle QR form logic
		document.addEventListener('DOMContentLoaded', function() {
			// Initialize: Hide all tab content except the first one
			const tabContents = document.querySelectorAll('.tab-content');
			tabContents.forEach((content, index) => {
				if (index === 0) {
					content.classList.add('active');
					content.style.display = 'block';
				} else {
					content.classList.remove('active');
					content.style.display = 'none';
				}
			});

			// Override the switchTab function for QR-specific functionality
			const originalSwitchTab = window.switchTab;
			window.switchTab = function(containerId, tabId, tabElement) {
				// Call original tab switching first
				if (originalSwitchTab) {
					originalSwitchTab(containerId, tabId, tabElement);
				}

				// QR-specific logic
				if (containerId === 'qr-tabs') {
					// Hide all tab content
					document.querySelectorAll('.tab-content').forEach(content => {
						content.style.display = 'none';
						content.classList.remove('active');
					});

					// Show the selected tab content
					const selectedTab = document.getElementById(tabId);
					if (selectedTab) {
						selectedTab.style.display = 'block';
						selectedTab.classList.add('active');
					}

					// Update hidden field
					document.getElementById('qr-type').value = tabId;
					// Clear inputs and reset preview
					clearInputs();
					resetPreview();
				}
			};

			// Initialize SMS preview handlers
			document.getElementById('sms-phone').addEventListener('input', debounce(updateSMSPreview, 1000));
			document.getElementById('sms-message').addEventListener('input', debounce(updateSMSPreview, 1000));
		});

		// Clear all inputs
		function clearInputs() {
			document.getElementById('text-input').value = '';
			document.getElementById('url-input').value = '';
			document.getElementById('email-input').value = '';
			document.getElementById('phone-input').value = '';
			document.getElementById('sms-phone').value = '';
			document.getElementById('sms-message').value = '';
		}

		// Reset preview to initial state
		function resetPreview() {
			document.getElementById('qr-preview').innerHTML = `
				<div class="text-center py-12">
					<div class="w-24 h-24 mx-auto mb-4 glass bg-white/40 rounded-2xl flex items-center justify-center border border-gray-200/50">
						<svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h1m-6 0h-2v-1m0 0V9.5M16 15h2l-2-2v2M8 15v-2l-2 2h2z"/>
						</svg>
					</div>
					<p class="text-gray-500 text-sm">Enter data to see preview</p>
				</div>
			`;
		}

		// Handle form submission for ALL types
		document.getElementById('qr-form').addEventListener('htmx:configRequest', function(evt) {
			const type = document.getElementById('qr-type').value;
			let data = '';

			// Collect data based on the current active type
			switch(type) {
				case 'text':
					data = document.getElementById('text-input').value.trim();
					break;
				case 'url':
					data = document.getElementById('url-input').value.trim();
					break;
				case 'email':
					data = document.getElementById('email-input').value.trim();
					break;
				case 'phone':
					data = document.getElementById('phone-input').value.trim();
					break;
				case 'sms':
					const phone = document.getElementById('sms-phone').value.trim();
					const message = document.getElementById('sms-message').value.trim();
					data = phone + (message ? '|' + message : '');
					break;
			}

			// Update the form data with the collected data
			evt.detail.parameters.data = data;

			console.log('Form submission - Type:', type, 'Data:', data); // Debug log
		});

		// Handle preview updates for SMS
		function updateSMSPreview() {
			const type = document.getElementById('qr-type').value;
			if (type !== 'sms') return;

			const phone = document.getElementById('sms-phone').value.trim();
			const message = document.getElementById('sms-message').value.trim();
			const smsData = phone + (message ? '|' + message : '');

			if (phone) {
				htmx.ajax('POST', '/qr/preview', {
					values: { type: 'sms', data: smsData },
					target: '#qr-preview'
				});
			}
		}

		// Debounce function
		function debounce(func, wait) {
			let timeout;
			return function executedFunction(...args) {
				const later = () => {
					clearTimeout(timeout);
					func(...args);
				};
				clearTimeout(timeout);
				timeout = setTimeout(later, wait);
			};
		}

		// Error handling
		function showError(message) {
			const errorDiv = document.getElementById('error-message');
			const errorText = document.getElementById('error-text');
			errorText.textContent = message;
			errorDiv.classList.remove('hidden');
		}

		function hideError() {
			document.getElementById('error-message').classList.add('hidden');
		}

		// Download function for completed QR codes
		function downloadQR(imageData, filename = 'qr-code.png') {
			const link = document.createElement('a');
			link.download = filename;
			link.href = imageData;
			link.click();
		}

		// Generate another QR
		function generateAnother() {
			document.getElementById('qr-result-container').innerHTML = '';
			resetPreview();
			clearInputs();
			// Switch to first tab
			const firstTab = document.querySelector('#qr-tabs .tab-button');
			if (firstTab) {
				firstTab.click();
			}
		}
	</script>
}

// Initial state component with glassmorphic design
templ QRInitialState() {
	<div class="text-center py-12">
		<div class="w-24 h-24 mx-auto mb-4 glass bg-white/40 rounded-2xl flex items-center justify-center border border-gray-200/50">
			<svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h1m-6 0h-2v-1m0 0V9.5M16 15h2l-2-2v2M8 15v-2l-2 2h2z"/>
			</svg>
		</div>
		<p class="text-gray-500 text-sm">Enter data to see preview</p>
	</div>
}

// QR Preview component with glassmorphic design
templ QRPreview(imageData string) {
	<div class="text-center py-6">
		<div class="w-40 h-40 mx-auto mb-3 glass bg-white/40 rounded-2xl p-4 border border-gray-200/50">
			<img src={ imageData } alt="QR Preview" class="w-full h-full rounded-lg"/>
		</div>
		<p class="text-gray-600 text-sm font-medium">Live Preview</p>
	</div>
}

// QR Result component using your reusable button components
templ QRResult(data QRResultData) {
	if data.Success {
		<div class="text-center">
			<!-- QR Code Display -->
			<div class="mb-8">
				<div class="w-72 h-72 mx-auto glass bg-white/40 rounded-3xl p-6 border border-gray-200/50">
					<img src={ data.ImageData } alt="Generated QR Code" class="w-full h-full rounded-2xl"/>
				</div>
			</div>

			<!-- Scan Me Badge -->
			<div class="mb-8">
				<div class="inline-block glass bg-black text-white px-8 py-3 rounded-full text-xl font-bold shadow-xl border border-white/20">
					SCAN ME!
				</div>
			</div>

			<!-- Action Buttons using your reusable components -->
			<div class="space-y-4 mb-8 flex flex-col items-center">
				<button onclick={ downloadQRScript(data.ImageData, data.QRType) }
						class="group inline-flex items-center px-8 py-4 text-base font-bold rounded-2xl text-white bg-black hover:bg-gray-800 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 backdrop-blur-sm border border-gray-200/20 relative overflow-hidden">
					<!-- Shimmer effect -->
					<div class="absolute inset-0 bg-gradient-to-r from-transparent via-white via-transparent opacity-0 group-hover:opacity-10 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-1000"></div>

					<svg class="w-5 h-5 mr-2 relative z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
					</svg>
					<span class="relative z-10">Download QR Code</span>
				</button>

				<button onclick={ generateAnotherScript() }
						class="group inline-flex items-center px-8 py-4 text-base font-bold rounded-2xl text-black backdrop-blur-xl bg-white/60 hover:bg-white/80 border border-gray-200/50 hover:border-gray-300/50 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 relative overflow-hidden">
					<!-- Glass shine effect -->
					<div class="absolute inset-0 bg-gradient-to-r from-transparent via-white via-transparent opacity-0 group-hover:opacity-20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-1000"></div>

					<span class="relative z-10">Generate Another</span>
				</button>
			</div>

			<!-- QR Info -->
			<div class="glass bg-white/40 rounded-2xl p-6 border border-gray-200/50 text-left max-w-md mx-auto">
				<h4 class="font-bold text-gray-800 mb-4 text-lg">QR Code Information:</h4>
				<div class="space-y-2">
					<div><strong class="text-gray-700">Type:</strong> <span class="text-gray-600">{ strings.ToUpper(data.QRType) }</span></div>
					<div><strong class="text-gray-700">Content:</strong> <span class="break-all text-gray-600">{ data.Content }</span></div>
				</div>
			</div>
		</div>
	} else {
		@QRError(data.Message)
	}
}

// Error component with glassmorphic design
templ QRError(message string) {
	<div class="glass bg-red-50/80 border border-red-200/50 rounded-2xl p-6 max-w-md mx-auto">
		<div class="flex">
			<div class="flex-shrink-0">
				<svg class="h-6 w-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
				</svg>
			</div>
			<div class="ml-4">
				<h3 class="text-base font-semibold text-red-800">Error</h3>
				<div class="mt-2 text-sm text-red-700">
					<p>{ message }</p>
				</div>
			</div>
		</div>
	</div>
}

// Script functions
script downloadQRScript(imageData, qrType string) {
	downloadQR(imageData, 'qr-' + qrType + '.png');
}

script generateAnotherScript() {
	generateAnother();
}