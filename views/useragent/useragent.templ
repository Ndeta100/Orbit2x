package useragent

import (
	"sort"
	"github.com/Ndeta100/orbit2x/views/layout"
)

type BrowserInfo struct {
	Name    string
	Version string
}

type DeviceInfo struct {
	Type      string
	OS        string
	OSVersion string
}

type ParsingResult struct {
	OriginalUA  string
	Browser     BrowserInfo
	Device      DeviceInfo
	IsMobile    bool
	IsTablet    bool
	IsDesktop   bool
	IsBot       bool
	BotName     string
	FullDetails map[string]string
	Error       string
}

// Main User Agent Page using base layout
templ UserAgentPage() {
	@layout.Base("User Agent Analyzer - Free for developers and everyone (orbit2x.com)") {
		@UserAgentHero()
		@UserAgentTabs()
		@UserAgentLoadingIndicator()
		@UserAgentResultsContainer()
		@UserAgentScript()
		@UserAgentContent()
	}
}

// Hero section with title and description
templ UserAgentHero() {
	<section class="relative overflow-hidden py-16 md:py-20">
		<!-- Glassmorphism background elements -->
		<div class="absolute inset-0 bg-gradient-to-br from-gray-50/30 via-white to-gray-50/30"></div>
		<div class="absolute top-20 left-10 w-32 h-32 bg-blue-100/30 rounded-full blur-2xl animate-float"></div>
		<div class="absolute top-40 right-20 w-24 h-24 bg-purple-100/25 rounded-full blur-xl animate-float-delayed"></div>
		<div class="absolute bottom-32 left-1/4 w-40 h-40 bg-indigo-100/20 rounded-full blur-3xl animate-float-delayed-2"></div>
		<div class="absolute bottom-20 right-1/3 w-28 h-28 bg-gray-100/25 rounded-full blur-2xl animate-float"></div>

			<!-- Breadcrumb -->
			<div class="mb-8">
				<div class="backdrop-blur-sm bg-white/30 px-4 py-2 rounded-full border border-gray-200/50 inline-flex items-center text-sm">
					<a href="/" class="text-black/60 hover:text-black transition-colors">Home</a>
					<svg class="mx-2 h-4 w-4 text-black/40" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
					</svg>
					<span class="text-black font-medium">User Agent</span>
				</div>
			</div>
		<div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
			<div class="text-center mb-12 fade-in">
				<div class="glassmorphism bg-white/40 rounded-3xl border border-gray-200/50 p-8 shadow-2xl max-w-4xl mx-auto">
					<h1 class="text-4xl md:text-5xl font-extrabold text-black mb-4">User Agent Analyzer</h1>
					<p class="text-lg text-gray-600 mb-4">Parse and analyze browser user agent strings with detailed information extraction</p>
				</div>
			</div>
		</div>
	</section>
}

// Tab navigation and content section
templ UserAgentTabs() {
	<div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
		<div class="glassmorphism bg-white/40 rounded-3xl border border-gray-200/50 shadow-2xl max-w-6xl mx-auto mb-8">
			<div class="flex border-b border-gray-200/50 p-6 pb-0">
				<button
					class="tab-button px-6 py-3 mr-2 mb-4 rounded-lg font-semibold text-sm glassmorphism bg-black text-white border border-gray-200/50 transition-all duration-200"
					data-tab="parse-tab"
					id="tab-parse"
				>
					Parse User Agent
				</button>
				<button
					class="tab-button px-6 py-3 mr-2 mb-4 rounded-lg font-semibold text-sm glassmorphism bg-white/60 text-black border border-gray-200/50 hover:bg-white/80 transition-all duration-200"
					data-tab="detect-tab"
					id="tab-detect"
				>
					Detect My Browser
				</button>
			</div>

			<!-- Tab Contents -->
			<div class="p-6">
				@UserAgentParseTab()
				@UserAgentDetectTab()
			</div>
		</div>
	</div>
}

// Parse user agent tab content
templ UserAgentParseTab() {
	<div id="parse-tab" class="tab-content">
		<form id="user-agent-form" hx-post="/useragent/parse" hx-target="#results" hx-indicator=".loading">
			<div class="mb-6">
				<label class="block text-sm font-medium text-gray-700 mb-2">User Agent String</label>
				<textarea
					name="userAgent"
					class="w-full p-4 border border-gray-200/50 rounded-xl glassmorphism bg-white/60 focus:bg-white/80 focus:outline-none focus:ring-2 focus:ring-black/20 transition-all duration-200 font-mono text-sm resize-y min-h-[100px]"
					placeholder="Paste a User Agent string here..."
					required
				></textarea>
			</div>
			<button
				type="submit"
				class="w-full bg-black text-white px-6 py-3 rounded-xl font-semibold hover:bg-gray-800 transition-all duration-200 shadow-lg"
			>
				Parse User Agent
			</button>
		</form>

		<!-- Example User Agents -->
		<div class="mt-8">
			<h3 class="text-lg font-semibold text-black mb-4">Example User Agents</h3>
			<div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
				@UserAgentExampleButtons()
			</div>
		</div>
	</div>
}

// Example user agent buttons
templ UserAgentExampleButtons() {
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('chrome-desktop')">
		Chrome Desktop
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('firefox-desktop')">
		Firefox Desktop
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('safari-desktop')">
		Safari Desktop
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('edge-desktop')">
		Edge Desktop
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('chrome-android')">
		Chrome Android
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('safari-ios')">
		Safari iOS
	</button>
	<button type="button" class="example-button glassmorphism bg-white/60 hover:bg-white/80 border border-gray-200/50 px-4 py-2 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200" onclick="setExampleUserAgent('googlebot')">
		Googlebot
	</button>
}

// Detect user agent tab content
templ UserAgentDetectTab() {
	<div id="detect-tab" class="tab-content hidden">
		<div class="text-center py-8">
			<div class="glassmorphism bg-white/60 rounded-2xl border border-gray-200/50 p-8 max-w-2xl mx-auto">
				<div class="w-16 h-16 bg-black rounded-2xl flex items-center justify-center mx-auto mb-4">
					<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
					</svg>
				</div>
				<h3 class="text-xl font-bold text-black mb-3">Detect Your Browser</h3>
				<p class="text-gray-600 mb-6">Click the button below to analyze your current browser's user agent string and get detailed information about your setup.</p>
				<button
					class="bg-black text-white px-8 py-3 rounded-xl font-semibold hover:bg-gray-800 transition-all duration-200 shadow-lg"
					hx-get="/useragent/detect"
					hx-target="#results"
					hx-indicator=".loading"
				>
					Analyze My Browser
				</button>
			</div>
		</div>
	</div>
}

// Loading indicator component
templ UserAgentLoadingIndicator() {
	<div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
		<div class="loading hidden">
			<div class="glassmorphism bg-white/40 rounded-2xl border border-gray-200/50 p-8 shadow-xl max-w-md mx-auto text-center">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-black mx-auto mb-4"></div>
				<p class="text-gray-600">Analyzing user agent...</p>
			</div>
		</div>
	</div>
}

// Results container
templ UserAgentResultsContainer() {
	<div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
		<div id="results" class="fade-in">
			<!-- Results will be loaded here -->
		</div>
	</div>
}

// JavaScript for user agent functionality
templ UserAgentScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			function showTab(tabName) {
				// Hide all tab contents
				const contents = document.querySelectorAll('.tab-content');
				contents.forEach(content => content.classList.add('hidden'));

				// Remove active class from all tabs
				const tabs = document.querySelectorAll('.tab-button');
				tabs.forEach(tab => {
					tab.classList.remove('bg-black', 'text-white');
					tab.classList.add('bg-white/60', 'text-black');
				});

				// Show selected content
				const targetContent = document.getElementById(tabName);
				if (targetContent) {
					targetContent.classList.remove('hidden');
				}

				// Mark selected tab as active
				const activeTab = document.getElementById('tab-' + tabName.replace('-tab', ''));
				if (activeTab) {
					activeTab.classList.remove('bg-white/60', 'text-black');
					activeTab.classList.add('bg-black', 'text-white');
				}
			}

			// Add click handlers to tab buttons
			document.querySelectorAll('[data-tab]').forEach(element => {
				element.addEventListener('click', function() {
					const tabName = this.getAttribute('data-tab');
					showTab(tabName);
				});
			});

			// Initialize first tab
			showTab('parse-tab');

			// Show/hide loading indicator
			document.body.addEventListener('htmx:beforeRequest', function() {
				document.querySelector('.loading').classList.remove('hidden');
			});

			document.body.addEventListener('htmx:afterRequest', function() {
				document.querySelector('.loading').classList.add('hidden');
			});
		});

		function setExampleUserAgent(type) {
			const textarea = document.querySelector('textarea[name="userAgent"]');

			const examples = {
				'chrome-desktop': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
				'firefox-desktop': "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0",
				'safari-desktop': "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15",
				'edge-desktop': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
				'chrome-android': "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
				'safari-ios': "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
				'googlebot': "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
			};

			if (examples[type]) {
				textarea.value = examples[type];
				// Auto-submit the form
				document.getElementById('user-agent-form').requestSubmit();
			}
		}
	</script>

	<style>
		@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

		body {
			font-family: 'Inter', sans-serif;
		}

		.glassmorphism {
			backdrop-filter: blur(16px);
			-webkit-backdrop-filter: blur(16px);
		}

		.animate-float {
			animation: float 6s ease-in-out infinite;
		}

		.animate-float-delayed {
			animation: float 6s ease-in-out infinite;
			animation-delay: 2s;
		}

		.animate-float-delayed-2 {
			animation: float 6s ease-in-out infinite;
			animation-delay: 4s;
		}

		@keyframes float {
			0%, 100% { transform: translateY(0px); }
			50% { transform: translateY(-20px); }
		}

		.fade-in {
			animation: fadeIn 0.8s ease-out;
		}

		@keyframes fadeIn {
			from { opacity: 0; transform: translateY(20px); }
			to { opacity: 1; transform: translateY(0); }
		}
	</style>
}

// Results component (unchanged from your original)
templ Results(result ParsingResult) {
	<div class="glassmorphism bg-white/40 rounded-3xl border border-gray-200/50 shadow-2xl max-w-6xl mx-auto p-8 mb-8">
		if result.Error != "" {
			<div class="glassmorphism bg-red-100/60 border border-red-300/50 rounded-xl p-6">
				<div class="flex items-center">
					<svg class="w-6 h-6 text-red-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
					<p class="text-red-800 font-medium">{ result.Error }</p>
				</div>
			</div>
		} else {
			@UserAgentStringDisplay(result.OriginalUA)
			@UserAgentSummaryCards(result)
			@UserAgentDetailedAnalysis(result.FullDetails)
		}
	</div>
}

// User agent string display
templ UserAgentStringDisplay(originalUA string) {
	<div class="mb-8">
		<h2 class="text-2xl font-bold text-black mb-4 flex items-center">
			<div class="w-8 h-8 bg-black rounded-lg flex items-center justify-center mr-3">
				<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
				</svg>
			</div>
			User Agent String
		</h2>
		<div class="glassmorphism bg-white/60 rounded-xl border border-gray-200/50 p-4">
			<code class="text-sm text-black break-all font-mono">{ originalUA }</code>
		</div>
	</div>
}

// Summary cards section
templ UserAgentSummaryCards(result ParsingResult) {
	<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
		<div class="glassmorphism bg-white/60 rounded-xl border border-gray-200/50 p-6">
			<div class="flex items-center mb-3">
				<div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center mr-3">
					<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
					</svg>
				</div>
				<h3 class="text-lg font-semibold text-black">Browser</h3>
			</div>
			<p class="text-2xl font-bold text-black">{ result.Browser.Name }</p>
			if result.Browser.Version != "" {
				<p class="text-gray-600">Version { result.Browser.Version }</p>
			}
		</div>

		<div class="glassmorphism bg-white/60 rounded-xl border border-gray-200/50 p-6">
			<div class="flex items-center mb-3">
				<div class="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center mr-3">
					<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
					</svg>
				</div>
				<h3 class="text-lg font-semibold text-black">Operating System</h3>
			</div>
			<p class="text-2xl font-bold text-black">{ result.Device.OS }</p>
			if result.Device.OSVersion != "" {
				<p class="text-gray-600">{ result.Device.OSVersion }</p>
			}
		</div>

		<div class="glassmorphism bg-white/60 rounded-xl border border-gray-200/50 p-6">
			<div class="flex items-center mb-3">
				<div class="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center mr-3">
					<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
					</svg>
				</div>
				<h3 class="text-lg font-semibold text-black">Device Type</h3>
			</div>
			<p class="text-2xl font-bold text-black">{ result.Device.Type }</p>
			<div class="flex gap-2 mt-2">
				if result.IsMobile {
					<span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">Mobile</span>
				}
				if result.IsTablet {
					<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Tablet</span>
				}
				if result.IsDesktop {
					<span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">Desktop</span>
				}
				if result.IsBot {
					<span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">Bot</span>
				}
			</div>
		</div>
	</div>
}

// Detailed analysis table
templ UserAgentDetailedAnalysis(fullDetails map[string]string) {
	<div class="glassmorphism bg-white/60 rounded-xl border border-gray-200/50 overflow-hidden">
		<div class="p-6 border-b border-gray-200/50">
			<h3 class="text-xl font-bold text-black flex items-center">
				<div class="w-6 h-6 bg-black rounded-lg flex items-center justify-center mr-3">
					<svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
				</div>
				Detailed Analysis
			</h3>
		</div>
		<div class="overflow-x-auto">
			<table class="w-full">
				<tbody class="divide-y divide-gray-200/50">
					@detailTableRows(fullDetails)
				</tbody>
			</table>
		</div>
	</div>
}

templ detailTableRows(details map[string]string) {
	for _, key := range sortedKeys(details) {
		<tr class="hover:bg-white/40 transition-colors duration-150">
			<td class="px-6 py-3 text-sm font-medium text-gray-700 w-1/3">{ key }</td>
			<td class="px-6 py-3 text-sm text-black font-mono">{ details[key] }</td>
		</tr>
	}
}

func sortedKeys(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	return keys
}