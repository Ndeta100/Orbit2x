// views/useragent/useragent.templ
package useragent

import "sort"

type BrowserInfo struct {
	Name    string
	Version string
}

type DeviceInfo struct {
	Type      string
	OS        string
	OSVersion string
}

type ParsingResult struct {
	OriginalUA  string
	Browser     BrowserInfo
	Device      DeviceInfo
	IsMobile    bool
	IsTablet    bool
	IsDesktop   bool
	IsBot       bool
	BotName     string // Keeping this for compatibility, though it will be empty
	FullDetails map[string]string
	Error       string
}

templ Index() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>User Agent Parser</title>
			<script src="https://unpkg.com/htmx.org@1.9.6"></script>
			<style>
			body {
				font-family: Arial, sans-serif;
				max-width: 800px;
				margin: 0 auto;
				padding: 20px;
				color: #333;
			}
			.card {
				background-color: white;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
				padding: 30px;
				margin-bottom: 30px;
			}
			h1 {
				color: #0e4174;
				text-align: center;
				margin-bottom: 10px;
			}
			.description {
				text-align: center;
				color: #666;
				margin-bottom: 20px;
			}
			.form-container {
				margin-bottom: 20px;
			}
			textarea {
				width: 100%;
				padding: 10px;
				border: 1px solid #ddd;
				border-radius: 4px;
				min-height: 80px;
				font-family: monospace;
				resize: vertical;
				margin-bottom: 10px;
			}
			.buttons {
				display: flex;
				gap: 10px;
				margin-bottom: 20px;
			}
			button {
				padding: 10px 15px;
				background-color: #0e4174;
				color: white;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				flex-grow: 1;
			}
			button:hover {
				background-color: #0a325e;
			}
			.loading {
				text-align: center;
				padding: 20px;
				display: none;
			}
			.htmx-request .loading {
				display: block;
			}
			.results {
				margin-top: 20px;
			}
			.result-section {
				background-color: #f5f5f5;
				border-radius: 4px;
				padding: 15px;
				margin-bottom: 15px;
			}
			.result-title {
				font-weight: bold;
				margin-bottom: 10px;
				color: #0e4174;
			}
			.result-content {
				background-color: white;
				border: 1px solid #ddd;
				border-radius: 4px;
				padding: 10px;
				font-family: monospace;
				white-space: pre-wrap;
				word-break: break-all;
				overflow-y: auto;
			}
			.error {
				background-color: #ffebee;
				border-left: 5px solid #f44336;
				padding: 15px;
				border-radius: 5px;
			}
			.copy-button {
				margin-top: 10px;
				background-color: #eee;
				color: #333;
				padding: 5px 10px;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				font-size: 12px;
			}
			.copy-button:hover {
				background-color: #ddd;
			}
			.tab-container {
				margin-bottom: 20px;
			}
			.tabs {
				display: flex;
				border-bottom: 1px solid #ddd;
			}
			.tab {
				padding: 10px 15px;
				cursor: pointer;
				border: 1px solid transparent;
				border-bottom: none;
				border-radius: 4px 4px 0 0;
				margin-right: 5px;
			}
			.tab.active {
				background-color: #f5f5f5;
				border-color: #ddd;
				border-bottom-color: #f5f5f5;
			}
			.tab-content {
				display: none;
				padding: 20px;
				border: 1px solid #ddd;
				border-top: none;
				background-color: #f5f5f5;
			}
			.tab-content.active {
				display: block;
			}
			.detect-button {
				background-color: #4caf50;
				margin-top: 20px;
			}
			.detect-button:hover {
				background-color: #388e3c;
			}
			.info-section {
				display: flex;
				margin-bottom: 15px;
			}
			.info-box {
				flex: 1;
				background-color: white;
				border: 1px solid #ddd;
				border-radius: 4px;
				padding: 15px;
				margin-right: 10px;
			}
			.info-box:last-child {
				margin-right: 0;
			}
			.info-box-title {
				font-weight: bold;
				color: #0e4174;
				margin-bottom: 8px;
				font-size: 14px;
			}
			.info-box-content {
				font-size: 13px;
			}
			.detail-table {
				width: 100%;
				border-collapse: collapse;
				margin-top: 15px;
			}
			.detail-table th, .detail-table td {
				padding: 8px;
				text-align: left;
				border-bottom: 1px solid #eee;
				font-size: 13px;
			}
			.detail-table th {
				font-weight: bold;
				color: #0e4174;
				width: 40%;
			}
			.examples {
				margin-top: 30px;
			}
			.example-title {
				font-weight: bold;
				margin-bottom: 10px;
				color: #0e4174;
			}
			.example-list {
				display: flex;
				flex-wrap: wrap;
				gap: 10px;
				margin-bottom: 20px;
			}
			.example-button {
				background-color: #f5f5f5;
				color: #333;
				border: 1px solid #ddd;
				border-radius: 4px;
				padding: 8px 12px;
				font-size: 12px;
				cursor: pointer;
			}
			.example-button:hover {
				background-color: #e0e0e0;
			}
		</style>
		</head>
		<body>
			<div class="card">
				<h1>User Agent Parser</h1>
				<p class="description">Analyze and extract information from browser user agent strings.</p>
				<div class="tab-container">
					<div class="tabs">
						<div class="tab active" onclick="switchTab('parse-tab', this)">Parse User Agent</div>
						<div class="tab" onclick="switchTab('detect-tab', this)">Detect My Browser</div>
					</div>
					<div id="parse-tab" class="tab-content active">
						<div class="form-container">
							<form id="user-agent-form" hx-post="/useragent/parse" hx-target="#results" hx-indicator=".loading">
								<textarea name="userAgent" placeholder="Paste a User Agent string here..." required></textarea>
								<button type="submit">Parse User Agent</button>
							</form>
							<div class="examples">
								<div class="example-title">Example User Agents:</div>
								<div class="example-list">
									<button type="button" class="example-button" onclick="setExampleUserAgent('chrome-desktop')">Chrome Desktop</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('firefox-desktop')">Firefox Desktop</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('safari-desktop')">Safari Desktop</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('edge-desktop')">Edge Desktop</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('chrome-android')">Chrome Android</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('safari-ios')">Safari iOS</button>
									<button type="button" class="example-button" onclick="setExampleUserAgent('googlebot')">Googlebot</button>
								</div>
							</div>
						</div>
					</div>
					<div id="detect-tab" class="tab-content">
						<p>Click the button below to analyze your current browser's user agent string:</p>
						<button
							class="detect-button"
							hx-get="/useragent/detect"
							hx-target="#results"
							hx-indicator=".loading"
						>
							Detect My Browser
						</button>
					</div>
				</div>
				<div class="loading">
					<svg width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" stroke="#0e4174">
						<g fill="none" fill-rule="evenodd">
							<g transform="translate(1 1)" stroke-width="2">
								<circle stroke-opacity=".5" cx="18" cy="18" r="18"></circle>
								<path d="M36 18c0-9.94-8.06-18-18-18">
									<animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="1s" repeatCount="indefinite"></animateTransform>
								</path>
							</g>
						</g>
					</svg>
				</div>
				<div id="results">
					<!-- Results will be loaded here -->
				</div>
			</div>
			<script>
			function switchTab(tabId, tabElement) {
				// Hide all tab contents
				document.querySelectorAll('.tab-content').forEach(tab => {
					tab.classList.remove('active');
				});

				// Remove active class from all tabs
				document.querySelectorAll('.tab').forEach(tab => {
					tab.classList.remove('active');
				});

				// Show the selected tab content
				document.getElementById(tabId).classList.add('active');

				// Add active class to the clicked tab
				tabElement.classList.add('active');
			}

			function setExampleUserAgent(type) {
				const textarea = document.querySelector('textarea[name="userAgent"]');

				switch(type) {
					case 'chrome-desktop':
						textarea.value = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36";
						break;
					case 'firefox-desktop':
						textarea.value = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0";
						break;
					case 'safari-desktop':
						textarea.value = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15";
						break;
					case 'edge-desktop':
						textarea.value = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0";
						break;
					case 'chrome-android':
						textarea.value = "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36";
						break;
					case 'safari-ios':
						textarea.value = "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1";
						break;
					case 'googlebot':
						textarea.value = "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)";
						break;
				}

				// Auto-submit the form
				document.getElementById('user-agent-form').requestSubmit();
			}
		</script>
		</body>
	</html>
}

templ Results(result ParsingResult) {
	<div class="results">
		if result.Error != "" {
			<div class="error">
				<p>Error: { result.Error }</p>
			</div>
		} else {
			<div class="result-section">
				<div class="result-title">User Agent String:</div>
				<div class="result-content">{ result.OriginalUA }</div>
			</div>
			<div class="info-section">
				<div class="info-box">
					<div class="info-box-title">Browser</div>
					<div class="info-box-content">
						<strong>{ result.Browser.Name }</strong>
						if result.Browser.Version != "" {
							<span>v{ result.Browser.Version }</span>
						}
					</div>
				</div>
				<div class="info-box">
					<div class="info-box-title">Operating System</div>
					<div class="info-box-content">
						<strong>{ result.Device.OS }</strong>
						if result.Device.OSVersion != "" {
							<span>{ result.Device.OSVersion }</span>
						}
					</div>
				</div>
				<div class="info-box">
					<div class="info-box-title">Device Type</div>
					<div class="info-box-content">
						<strong>{ result.Device.Type }</strong>
					</div>
				</div>
			</div>
			<div class="result-section">
				<div class="result-title">Detailed Information:</div>
				<table class="detail-table">
					<tbody>
						@detailTableRows(result.FullDetails)
					</tbody>
				</table>
			</div>
		}
	</div>
}

templ detailTableRows(details map[string]string) {
	for _, key := range sortedKeys(details) {
		<tr>
			<th>{ key }</th>
			<td>{ details[key] }</td>
		</tr>
	}
}

func sortedKeys(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	return keys
}
