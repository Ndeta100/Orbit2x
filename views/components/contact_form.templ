package components

templ ContactForm(formTitle, formSubtitle, submitText string) {
    <div class="backdrop-blur-xl bg-white/40 rounded-3xl border border-gray-200/50 p-8 shadow-2xl">
        <div class="text-center mb-8">
            <h2 class="text-3xl font-bold text-black mb-4">{ formTitle }</h2>
            if formSubtitle != "" {
                <p class="text-lg text-black/70">{ formSubtitle }</p>
            }
        </div>

        <form id="contact-form" class="space-y-6" method="POST" action="/contact/submit">
            <!-- Name Field -->
            <div>
                <label for="name" class="block text-sm font-semibold text-black mb-2">
                    Name <span class="text-red-500">*</span>
                </label>
                <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    class="w-full px-4 py-3 rounded-xl backdrop-blur-sm bg-white/60 border border-gray-200/50 text-black placeholder-black/50 focus:outline-none focus:ring-2 focus:ring-black/20 focus:border-black/30 transition-all"
                    placeholder="Your full name"
                />
                <div class="error-message text-red-500 text-sm mt-1 hidden" id="name-error"></div>
            </div>

            <!-- Email Field -->
            <div>
                <label for="email" class="block text-sm font-semibold text-black mb-2">
                    Email Address <span class="text-red-500">*</span>
                </label>
                <input
                    type="email"
                    id="email"
                    name="email"
                    required
                    class="w-full px-4 py-3 rounded-xl backdrop-blur-sm bg-white/60 border border-gray-200/50 text-black placeholder-black/50 focus:outline-none focus:ring-2 focus:ring-black/20 focus:border-black/30 transition-all"
                    placeholder="your@email.com"
                />
                <div class="error-message text-red-500 text-sm mt-1 hidden" id="email-error"></div>
            </div>

            <!-- Subject Field -->
            <div>
                <label for="subject" class="block text-sm font-semibold text-black mb-2">
                    Subject <span class="text-red-500">*</span>
                </label>
                <select
                    id="subject"
                    name="subject"
                    required
                    class="w-full px-4 py-3 rounded-xl backdrop-blur-sm bg-white/60 border border-gray-200/50 text-black focus:outline-none focus:ring-2 focus:ring-black/20 focus:border-black/30 transition-all"
                >
                    <option value="">Select a subject</option>
                    <option value="general">General Question</option>
                    <option value="bug-report">Bug Report</option>
                    <option value="feature-request">Feature Request</option>
                    <option value="tool-request">New Tool Request</option>
                    <option value="privacy">Privacy Question</option>
                    <option value="technical">Technical Support</option>
                    <option value="business">Business Inquiry</option>
                    <option value="other">Other</option>
                </select>
                <div class="error-message text-red-500 text-sm mt-1 hidden" id="subject-error"></div>
            </div>

            <!-- Message Field -->
            <div>
                <label for="message" class="block text-sm font-semibold text-black mb-2">
                    Message <span class="text-red-500">*</span>
                </label>
                <textarea
                    id="message"
                    name="message"
                    required
                    rows="6"
                    class="w-full px-4 py-3 rounded-xl backdrop-blur-sm bg-white/60 border border-gray-200/50 text-black placeholder-black/50 focus:outline-none focus:ring-2 focus:ring-black/20 focus:border-black/30 transition-all resize-vertical"
                    placeholder="Please describe your question or issue in detail..."
                ></textarea>
                <div class="flex justify-between mt-2">
                    <div class="error-message text-red-500 text-sm hidden" id="message-error"></div>
                    <div class="text-xs text-black/50" id="message-count">0 / 1000 characters</div>
                </div>
            </div>

            <!-- Privacy Notice -->
            <div class="backdrop-blur-sm bg-blue-50/50 border border-blue-200/50 rounded-xl p-4">
                <div class="flex items-start space-x-3">
                    <svg class="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <div class="text-sm text-blue-800">
                        <strong>Privacy Notice:</strong> We only use your contact information to respond to your message.
                        We don't store messages long-term or share your information with third parties.
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="pt-4">
                <button
                    type="submit"
                    id="submit-btn"
                    class="w-full px-8 py-4 bg-black text-white rounded-xl font-semibold hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-black/20 transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                    <span id="submit-text">{ submitText }</span>
                    <svg id="submit-loading" class="hidden animate-spin ml-2 h-5 w-5 text-white inline-block" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </button>
            </div>

            <!-- Success/Error Messages -->
            <div id="form-messages" class="hidden">
                <div id="success-message" class="hidden backdrop-blur-sm bg-green-50/50 border border-green-200/50 rounded-xl p-4">
                    <div class="flex items-center space-x-3">
                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <div class="text-green-800">
                            <strong>Message sent successfully!</strong> We'll get back to you within 24 hours.
                        </div>
                    </div>
                </div>

                <div id="error-message" class="hidden backdrop-blur-sm bg-red-50/50 border border-red-200/50 rounded-xl p-4">
                    <div class="flex items-center space-x-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <div class="text-red-800">
                            <strong>Error sending message.</strong> Please try again or email us directly at <a href="mailto:help@orbit2x.com" class="underline">help@orbit2x.com</a>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Contact Form JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('contact-form');
            const submitBtn = document.getElementById('submit-btn');
            const submitText = document.getElementById('submit-text');
            const submitLoading = document.getElementById('submit-loading');
            const messageTextarea = document.getElementById('message');
            const messageCount = document.getElementById('message-count');

            // Character counter for message field
            if (messageTextarea && messageCount) {
                messageTextarea.addEventListener('input', function() {
                    const length = this.value.length;
                    const maxLength = 1000;
                    messageCount.textContent = `${length} / ${maxLength} characters`;

                    if (length > maxLength) {
                        messageCount.classList.add('text-red-500');
                        messageCount.classList.remove('text-black/50');
                    } else {
                        messageCount.classList.remove('text-red-500');
                        messageCount.classList.add('text-black/50');
                    }
                });
            }

            // Form validation
            function validateForm() {
                const name = document.getElementById('name').value.trim();
                const email = document.getElementById('email').value.trim();
                const subject = document.getElementById('subject').value;
                const message = document.getElementById('message').value.trim();

                let isValid = true;

                // Reset previous errors
                document.querySelectorAll('.error-message').forEach(error => {
                    error.classList.add('hidden');
                    error.textContent = '';
                });

                // Validate name
                if (!name) {
                    showError('name-error', 'Name is required');
                    isValid = false;
                } else if (name.length < 2) {
                    showError('name-error', 'Name must be at least 2 characters');
                    isValid = false;
                }

                // Validate email
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!email) {
                    showError('email-error', 'Email is required');
                    isValid = false;
                } else if (!emailRegex.test(email)) {
                    showError('email-error', 'Please enter a valid email address');
                    isValid = false;
                }

                // Validate subject
                if (!subject) {
                    showError('subject-error', 'Please select a subject');
                    isValid = false;
                }

                // Validate message
                if (!message) {
                    showError('message-error', 'Message is required');
                    isValid = false;
                } else if (message.length < 10) {
                    showError('message-error', 'Message must be at least 10 characters');
                    isValid = false;
                } else if (message.length > 1000) {
                    showError('message-error', 'Message must be less than 1000 characters');
                    isValid = false;
                }

                return isValid;
            }

            function showError(elementId, message) {
                const errorElement = document.getElementById(elementId);
                if (errorElement) {
                    errorElement.textContent = message;
                    errorElement.classList.remove('hidden');
                }
            }

            // Form submission
            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    if (!validateForm()) {
                        return;
                    }

                    // Show loading state
                    submitBtn.disabled = true;
                    submitText.textContent = 'Sending...';
                    submitLoading.classList.remove('hidden');

                    try {
                        const formData = new FormData(form);
                        const response = await fetch('/contact/submit', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (response.ok) {
                            // Show success message
                            document.getElementById('form-messages').classList.remove('hidden');
                            document.getElementById('success-message').classList.remove('hidden');
                            document.getElementById('error-message').classList.add('hidden');

                            // Reset form
                            form.reset();
                            if (messageCount) messageCount.textContent = '0 / 1000 characters';

                            // Scroll to success message
                            document.getElementById('success-message').scrollIntoView({
                                behavior: 'smooth',
                                block: 'center'
                            });
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    } catch (error) {
                        console.error('Form submission error:', error);

                        // Show error message
                        document.getElementById('form-messages').classList.remove('hidden');
                        document.getElementById('error-message').classList.remove('hidden');
                        document.getElementById('success-message').classList.add('hidden');
                    } finally {
                        // Reset button state
                        submitBtn.disabled = false;
                        submitText.textContent = '{ submitText }';
                        submitLoading.classList.add('hidden');
                    }
                });
            }
        });
    </script>
}