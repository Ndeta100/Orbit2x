name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # Test and Build
  test-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy
          npm ci

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Clean generated files
        run: find . -name "*_templ.go" -delete

      - name: Generate templ files
        run: templ generate

      - name: Verify templ generation
        run: |
          echo "Generated templ files:"
          find . -name "*_templ.go" -type f

      - name: Build frontend assets
        run: npm run build

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        run: go build -o orbit2x .

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: orbit2x-binary
          path: orbit2x

  # Deploy to Railway (on main branch)
  deploy-railway:
    runs-on: ubuntu-latest
    needs: test-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railwayapp/railway-deploy@v3
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_NAME }}

  # Create GitHub Release (on version tags)
  create-release:
    runs-on: ubuntu-latest
    needs: test-build
    if: github.event_name == 'release'

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy
          npm ci

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Clean generated files
        run: find . -name "*_templ.go" -delete

      - name: Generate templ files
        run: templ generate

      - name: Verify templ generation
        run: |
          echo "Generated templ files:"
          find . -name "*_templ.go" -type f

      - name: Build frontend assets
        run: npm run build

      - name: Build release binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          binary_name="orbit2x-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          CGO_ENABLED=0 go build -ldflags="-s -w" -o "${binary_name}" .

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ./orbit2x-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}